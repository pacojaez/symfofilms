{% extends 'layouts/admin.html.twig' %}

{% block title %} Portada {% endblock %}

{% block main %}

<div class="flex-col p-4 m-4 d-flex justify-content-center">
    <div class="p-2 m-2 row">
        <h1 class="uppercase font-weight-bold">Cosas que vamos haciendo en el proyecto</h1>        
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">INTRODUCCION: SYMFONY01 </h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          PRINCIPIOS DE FUNCIONAMIENTO DE SYMFONY:
        </summary>
        <div class="collapse-content">
            <h3 class="m-4">La clase <code class="code">Symfony\Component\HttpKernel\Kernel</code></h3>
            <ul class="m-4">
                <li>Es la responsable de inicializar todos los paquetes</li>
                <li>crea el contenedor de servicios antes de atender la petición usando el método <code class="code">handle()</code>.</li>
                <li>El Kernel usa el nombre del entorno (dev, test o prod)</li>       
            </ul>
            <hr>
            <ul class="m-4">
                <li class="font-weight-bold">DOCUMENTACIÓN HERRAMIENTAS:</li>
                <li><a href="https://twig.symfony.com/" target="blank">TWIG </a></li>
                <li><a href="https://getcomposer.org/" target="blank">COMPOSER</a></li>
                <li><a href="https://flex.symfony.com/" target="blank">SYMFONY/FLEX</a></li>      
                <li><a href="https://symfony.com/doc/current/doctrine.html" target="blank">DOCTRINE</a></li>
                <li><a href="https://symfony.com/doc/current/logging.html" target="blank">SYMFONY/MONOLOG-BUNDLE</a></li>
                <li><a href="https://symfony.com/doc/current/email.html" target="blank">SWIFTMAILER</a></li>
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">INTRODUCCION: SYMFONY01 </h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          PRINCIPIOS DE FUNCIONAMIENTO DE SYMFONY:
        </summary>
        <div class="collapse-content">
            <h3 class="m-4">La clase <code class="code">Symfony\Component\HttpKernel\Kernel</code></h3>
            <ul class="m-4">
                <li>Es la responsable de inicializar todos los paquetes</li>
                <li>crea el contenedor de servicios antes de atender la petición usando el método <code class="code">handle()</code>.</li>
                <li>El Kernel usa el nombre del entorno (dev, test o prod)</li>       
            </ul>
            <hr>
            <ul class="m-4">
                <li class="font-weight-bold">DOCUMENTACIÓN HERRAMIENTAS:</li>
                <li><a href="https://twig.symfony.com/" target="blank">TWIG </a></li>
                <li><a href="https://getcomposer.org/" target="blank">COMPOSER</a></li>
                <li><a href="https://flex.symfony.com/" target="blank">SYMFONY/FLEX</a></li>      
                <li><a href="https://symfony.com/doc/current/doctrine.html" target="blank">DOCTRINE</a></li>
                <li><a href="https://symfony.com/doc/current/logging.html" target="blank">SYMFONY/MONOLOG-BUNDLE</a></li>
                <li><a href="https://symfony.com/doc/current/email.html" target="blank">SWIFTMAILER</a></li>
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">INTRODUCCION: SYMFONY01 </h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
           <p class="font-weight-bold">comandos útiles:</p>
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li> <code class="code"> composer install</code></li>
                <li> <code class="code"> composer require</code></li>
                <li> <code class="code"> composer update</code></li>
                <li> <code class="code"> composer remove</code></li> 
                
                <li> 
                    Crear un proyecto: <code class="code"> composer create-project vendor/project nombre</code> vendor-project será 
                    <code class="code">symfony/website-skeleton:</code> para una app web o
                    <code class="code">symfony/skeleton:</code> para una API o microservicio
                </li>
                
                <li> Con el binario de symfony: <code class="code"> symfony new nombreproyecto</code></li>
                <li> <code class="code">symfony server:start</code></li>  
                <li> <code class="code">php bin/console cache:clear</code></li> 
                <li> <code class="code">php bin/console debug:router</code></li>
                <li> <code class="code">composer require annotations</code></li>
                <li> <code class="code">composer require logger</code></li>
                <li> <code class="code">symfony check:security</code></li>
                <li> <code class="code">php bin/console server:dump</code></li>
                <li> <code class="code">php bin/console debug:container --env-vars</code></li>
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">NUEVO PROYECTO: SYMFONY02 </h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          REQUERIMIENTOS
        </summary>
        <div class="collapse-content">
            <h3 class="m-4"><code class="code">symfony check:requirements</code></h3>
            <ul class="m-4">
                <li>Para cumplir con los requisitos opcionales, editaremos el fichero php.ini</li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">NUEVO PROYECTO: SYMFONY02 </h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          FORMAS DE CREAR UN PROYECTO
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li>1. Crear el proyecto haciendo uso de Composer</li>
                <li>2. Crear el proyecto con el binario de Symfony (opción recomendada).</li>
                <li>3. Crear el proyecto directamente desde el IDE, por ejemplo Eclipse.</li>
                <li>4. Clonar el repositorio de Symfony con GIT.</li>
            </ul>
        </div>
      </details>
    </div>
    <!-- collapse panel -->
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">CONCEPTOS BÁSICOS SYMFONY03:</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          ESTRUCTURA DE CARPETAS
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li>config: contiene la configuración del proyecto, es una de las primeras cosas que tendremos que editar.</li>
                <li>src: contiene todo el código PHP.</li>
                <li>template: contiene los templates de Twig</li>
                <li>bin: contiene el fichero bin/console</li>
                <li>var: contiene los ficheros creados automáticamente, como ficheros de caché y de log.</li>
                <li>vendor: contiene los paquetes de terceros</li>
                <li>public: es el documentroot de nuestro proyecto y contendrá todos los ficheros que deban ser accesibles públicamente.</li>
            </ul>
        </div>
      </details>
    </div>

    <!-- collapse panel -->
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">CONCEPTOS BÁSICOS SYMFONY03:</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          CONFIGURAR DB
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li>En .env<code class="code">DATBASE_URL=“mysql://user:password@host:puerto/nombreBDD?serverVersion=versionMySQL”</code></li>
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">CONFIGURACIÓN 1: SYMFONY05</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            Formatos de configuración
        </summary>
        <div class="collapse-content">
        <h3 class="m-4">Entornos: DEV, PROD, TEST</h3>
            <ul class="m-4">
                <li>seleccionar el entorno en <code class="code">.env</code></li>
                <li>Carpeta config/packages para configurar entornos</li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">CONFIGURACIÓN 1: SYMFONY05</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            Ficheros de configuración
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li>routes.yaml define la configuración de rutas,</li>
                <li>services.yaml configura los servicios</li>
                <li>bundles.php activa o desactiva los paquetes</li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">CONFIGURACIÓN 1: SYMFONY05</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            El fichero .env y Variables de entorno
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li>carga automáticamente las variables de los ficheros .env en la variable superglobal $_ENV.</li>
                <li>
                    Si queremos acceder a una variable de entorno, por ejemplo desde un controlador, una de las formas es la de declararla como
                    parámetro en el fichero services.yaml.
                </li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">CONFIGURACIÓN 2: SYMFONY06</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            Secretos y Creacion de entornos
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li><code class="code">APP_DEBUG=true</code></li>
                <li>SECRETOS:</li>
                <li>extension=sodium</li>
                <li>php bin/console secrets:generate-keys</li>
                <li>php bin/console secrets:set DATABASE_PASSWORD</li>
                <li>php bin/console secrets:list</li>
                
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">BDD1: SYMFONY07</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            ENTIDADES Y MIGRACIONES - DOCTRINE ORM
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <ul>
                <li><code class="code">php bin/console doctrine:database:create</code></li>
                <li><code class="code">php bin/console list doctrine</code></li>
                <li><code class="code">php bin/console make:entity</code></li>
                <li><code class="code">php bin/console doctrine:migrations:migrate</code></li>
                <li><code class="code">php bin/console doctrine:migrations:status</code></li>
                <li><code class="code">php bin/console make:entity --regenerate -overwrite</code></li>
                <li><code class="code"> php bin/console debug:router</code></li>
                <li><code class="code">php bin/console router:match /movie/edit/3 </code></li>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">BDD1: SYMFONY08</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            EJEMPLO CRUD
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li><code class="code">php bin/console make:controller PeliculaController</code></li>
                <li>Para los métodos del controlador: <code class="code">$entityManager= $this->getDoctrine()->getManager();</code></li>
                <li>Para los guardar en la DB: <code class="code">$entityManager->persist( $peli )->flush();</code></li>
            
                <li>Ejecutar consultas por la consola de comandos: <code class="code">php bin/console doctrine:query:sql “consulta”</code></li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">BDD1: SYMFONY08</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            CREACIÓN DE COMANDOS
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li>SINTAXIS: <code class="code">php bin/console app:create-movie “Titanic” 179 “James Cameron” “Drama”</code></li>
                <li>Crear Comando: <code class="code">php bin/console make:command</code>  y añadir el nombre del comando <code class="code">app:createMovie</code></li>
                <li>Carpeta: <code class="code">src/Command/CreateMovieCommand.php</code></li>
                <li>crear propiedad <code class="code">private $entityManager;</code></li>
                <li>Método configure(): <code class="code">setDescription('')->setHelp('')->addArgument('');</code></li>
                <li>Método execute(): <code class="code">$output->writeln('<fg=white;bg=black>CREAR PELICULA\</>');</code></li>
                <li>Método execute(): <code class="code">$titulo= $input->getArgument('titulo'); $director....etc</code></li>
                <li>Método execute(): <code class="code">$peli = new Movie();  $peli->setTitulo($titulo)->setDirector(......etc</code></li>
                <li>Método execute(): <code class="code">$this->entityManager->persist($peli); $this->entityManager->flush(); $output->writeln("<fg=white;bg=black>PELÍCULA $titulo CREADA</>"); return Command::SUCCESS;</code></li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">BDD1: SYMFONY08</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            READ
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li>INYECCION DE DEPENDENCIAS: <code class="code">public function show( Pelicula $pelicula): Response { ... }</code></li>
                <li>SelectALL: <code class="code">$pelis = $this->getDoctrine()->getRepository(Pelicula::class)->findAll();</code></li>
                <li>SelectOne: <code class="code">$peli = $this->getDoctrine()->getRepository(Pelicula::class)->find( $pelicula );</code></li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">BDD1: SYMFONY08</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            UPDATE
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li>INYECCION DE DEPENDENCIAS: <code class="code">public function update( Pelicula $pelicula): Response { ... }</code></li>
                <li>Update: <pre><code class="code">$entityManager = $this->getDoctrine()->getManager();
                                               $peli = $entityManager->getRepository(Pelicula::class)->find($pelicula);               
                                               $peli->setTitulo( "Nuevo titulo");
                                               $entityManager->flush();
                            </code></pre></li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">BDD1: SYMFONY08</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            DELETE
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li>INYECCION DE DEPENDENCIAS: <code class="code">public function delete( Pelicula $pelicula): Response { ... }</code></li>
                <li>Update: 
                    <code class="code">
                    $entityManager = $this->getDoctrine()->getManager();
                    $peli = $entityManager->getRepository(Pelicula::class)->find($pelicula);
                    $entityManager->remove( $peli );             
                    $entityManager->flush();
                    </code>
                </li>
                <li><code class="code">$entityManager->flush();</code></li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">BDD1: SYMFONY08</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            CRUD FAST WAY
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
                <li>Crear un CRUD con un solo comando de consola: <code class="code">php bin/console make:crud</code></li>
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">SYMFOFILMS: SYMFONY09</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            RUTAS
        </summary>
        <div class="collapse-content">
            <code class="code">/ portada Portada de SymfoFilms</code>
            <code class="code">/peliculas pelicula_list Lista de películas</code>
            <code class="code">/pelicula/create pelicula_create Nueva película</code>
            <code class="code">/pelicula/edit/{id} pelicula_edit Editar datos de la película</code>
            <code class="code">/pelicula/delete/{id} pelicula_delete Borrar película</code>
            <code class="code">/pelicula/{id} pelicula_show Mostrar detalles de la película</code>
            <ul class="m-4">
                <li>Solapamiento de rutas</li>
               <ul class="m-4">
                    <li><code class="code">/pelicula/create/</code> entraría por el método <code class="code">show()</code> 
                        y tomaría el id como parámetro
                    </li>
                    <li>Esto también se puede resolver haciendo que la ruta para
                    <code class="code">pelicula_show</code> sea <code class="code">/pelicula/show/{id}</code> o hilando fino con los tipos de
                    los parámetros (vigilando que sea un entero).
                    </li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">SYMFOFILMS: SYMFONY09</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            TWIG PLANTILLAS (herencia, templates), ASSETS
        </summary>
        <div class="collapse-content">
            <ul>
                <li><code class="code">composer require twig</code></li>
                <li><code class="code">extends, block, parent()</code></li>
            </ul>
            <ul>
                <li>ASSETS: <code class="code">asset('/js/app.js')</code></li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">SYMFOFILMS: SYMFONY09</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            La función path()
        </summary>
        <div class="collapse-content">
            <ul class="m-4">
            <li><code class="code">path('nombre_de_la_ruta', {'parametro':peli.id})</code></li>
        </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">SYMFOFILMS: SYMFONY10</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            FORMULARIOS CON EL FORMBUILDER DE SYMFONY
        </summary>
        <div class="collapse-content">
            <ul>
                <li><pre><code class="code">composer require symfony/form</code></pre></li>
                <li><pre><code class="code"> php bin/console make:form</code></pre></li>
                <li>Vincularlo a una Entity</li>
                <li><a href="https://symfony.com/doc/current/reference/forms/types.html" target="blank">Link a Form Types</a></li>
                <li>Hacer todos los use necesarios</li>
                <li>incluirlo en la vista form(formulario) </li>
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">RUTAS: SYMFONY11</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            CONFIGURACIÓN DE LAS RUTAS: YAML, XML, PHP o anotaciones
        </summary>
        <div class="collapse-content">
            <ul>
                <li>Usar anotaciones:<pre><code class="code">composer require doctrine/annotations</code></pre></li>
                <li><code class="code"> config/routes</code>llamado <code class="code">annotations.yaml</code></li>
                <li>En el controlador crear anotaciones antes de cada método que nos devuelva una ruta:</li>
                <li><code class="code"> 
                                      /**
                                      * @Route("/movie/search", name="movie_search")
                                      */
                                      public function search( Request $request ): Response {
                    </code>
                </li>
                <li>Es más cómodo trabajar con nombres de ruta y no por su URL.</li>
            </ul>
        </div>
      </details>
    </div>
   
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">RUTAS: SYMFONY11</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            Expression Language Translations
        </summary>
        <div class="collapse-content">
            <ul>
                <li>Expression Language: <pre><a class="code" href=" https://symfony.com/doc/current/components/expression_language/syntax.html"> https://symfony.com/doc/current/components/expression_language/syntax.html</a></pre></li>
                <li><code class="code"> composer require symfony/expression-language</code></li>
                
                <li>Para más información sobre localización y traducción, podéis consultar los artículos:</li>
                <li><a href="https://symfony.com/doc/current/translation.html" target="blank">https://symfony.com/doc/current/translation.html</a></li>
                <li><a href="https://symfony.com/doc/current/translation/locale.html" target="blank">https://symfony.com/doc/current/translation/locale.html</a></li>
            </ul>
        </div>
      </details>
    </div>

     <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">RUTAS: SYMFONY11</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            Parámetros y agrupamiento
        </summary>
        <div class="collapse-content">
            <ul>
                <li>Parámetro en la ruta: <pre>
                 /** @Route("/movie/show/{id}", name="movie_show")*/
                 </pre></li>
                <li>Validación de parámetros: <code class="code">/** @Route("/movie/show/{id<\d+>}", name="movie_show")*/</code></li>
                <li>Parámetros opcionales:<code class="code">/** @Route("/movie/show/{id?}", name="movie_show")*/</code></li>
                <li>Conversión de Parámetros:<code class="code">/** @Route("/movie/show/{id?}", name="movie_show")*/</code>
                Método en el controlador: <code class="code"> public function show( Movie $movie ): Response {</code></li>
                <li>Parámetros especiales: <code class="code"> config/packages/translations.yaml</code></li>
                <li>Accediendo a _locale: <code class="code"> $request->getLocale()</code></li>
                <li>Recuperando parámetros en las rutas: 
                    <code class="code">
                        $nombreRuta = $request->attributes->get(‘_route’); 
                        $parametros = $request->attributes->get(‘_route_params’);
                        $todos = $request->attributes->all();
                    </code>
                </li>
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">RUTAS: SYMFONY11</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            Prioridad y Depuración 
        </summary>
        <div class="collapse-content">
            <ul>
                <li>Podemos definir la prioridad de la ruta con un numero entero mayor de 0 (0 es por defecto). A mayor numero mayor prioridad <pre>
                 /** @Route( "/movie/show/{id}", name="movie_show", priority=1 )*/
                 </pre></li>
                <li>Visualización de rutas: <code class="code">php bin/console debug:router</code></li>
                <li>Info detallada de una ruta:<code class="code">php bin/console debug:router pelicula_create</code></li>
                <li>Opciones de debug:router <code class="code">--env</code><code class="code">--show-controllers</code></li>
                <li><code class="code"> php bin/console router:match /pelicula/show/3</code></li>
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">CONTROLADORES: SYMFONY12</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            REQUEST - RESPONSE 
        </summary>
        <div class="collapse-content">
            <ul>
                <li>Crear controlador:<code class="code">php bin/console make:controller</code></li>
                <li>RECIBE UNA REQUEST Y GENERA UNA RESPONSE</li>
                <li>El Objeto Controller hereda de AbstractController: <code class="code">$this->render()</code> es un método heredado</li>
                <li>Métodos interesantes: 
                  <code class="code">$this->generateUrl('')</code>
                  <code class="code">$this->redirect('')</code>
                  <code class="code">$this->redirectToRoute('')</code>
                </li>
                <li>Conocer los canales disponibles, podemos hacer: <code class="code">php bin/console debug:container monolog</code></li>
                <li>NOTA: recordad hacer los “use” si usamos directamente la clase.</li>
                <li>CONFIGURACIÓN CON getParameters(): 
                  <code class="code">  $projectDir = $this->getParameter('kernel.project_dir');</code>
                  <code class="code">$adminEmail = $this->getParameter('app.admin_mail');</code>
                </li>               
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">CONTROLADORES: SYMFONY12</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            SERVICIOS 
        </summary>
        <div class="collapse-content">
            <ul>
                <li>Usos de los Servicios: enviar emails, consultar a la BDD, registrar información (log)</li>
                <li>Servivio de log: <code class="code">composer require monolog</code></li>
                <li>Inyectar dependencia: <code class="code">use Psr\Log\LoggerInterface;</code></li>
                <li>Generar respuestas HHTP: 
                  <code class="code">$mensaje = "Pelicula con id: $peli->getid() guardada correctamente";</code>
                  <code class="code">this->addFlash('success', $mensaje);</code>
                  <code class="code">$logger->info( $mensaje );</code>
                </li>
                <li>crear un canal en <code class="code">monolog.yaml</code> en <code class="code">config/packages</code></li>
                <li>Nuestro parámetro $logger deberá llamarse <code class="code">$appInfoLogger.</code> OJO CON LA CONVENCIÓN!!!!!!</li>               
            </ul>
        </div>
      </details>
    </div>

     <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">RESPONSE: SYMFONY13</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          PROTOCOLO HTTP, RESPONSES, REDIRECCIONES 
        </summary>
        <div class="collapse-content">
            <ul>
                <li>EL OBJETO RESPONSE RECIBE TRES ARGUMENTOS: CONTENIDO DE RESPUESTA, CODIGO DE ESTADO Y UN ARRAY DE ENCABEZADOS</li>
                <li>REDIRECCIÓN EXTERNA: <code class="code">$response = new RedirectResponse(‘https://juegayestudia.com’);</code></li>
                <li>REDIRECCIÓN INTERNA: <code class="code">$response = new RedirectResponse(‘/pelicula’);</code></li>
                <li>redirect: 
                  <code class="code">$this->redirect(‘https://juegayestudia.com’);</code>
                  <code class="code">$this->redirectToRoute(‘allmovies’);</code>
                </li>           
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">JSON RESPONSE: SYMFONY13</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          JSON, XML, CSV ....
        </summary>
        <div class="collapse-content">
            <ul>
                <li>Package: <code class="code">composer require symfony/serializer</code></li>
                <li>El codificador se encarga de convertir al formato especificado. El normalizador se encarga de mapear los datos a objeto.</li>         
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">COOKIES-FICHEROS: SYMFONY13</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          ANEXANDO COOKIES Y FICHEROS
        </summary>
        <div class="collapse-content">
            <ul>
                <li>Sintaxis: <code class="code">$response->headers->setCookie(Cookie::create(‘autor', ‘Robert'));</code></li>
                <li>Método estático: <code class="code">Cookie::create()</code></li>
                <li>PACKAGE MIME: <code class="code">composer require symfony/mime</code></li>     
                <li>Metodo de kernel para recuperar el directorio raiz: <code class="code">$raiz=$kernel->getProjectDir();</code></li> 
                <li>Forma de responder con el envio de un fichero: <code class="code">return new BinaryFileResponse('pathToResource')</code></li>    
                <li>inline / attachment: <code class="code">Content-Disposition</code></li>
                <li>Borrar tras enviar: <code class="code">$response->deleteFileAfterSend()</code></li>   
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">REQUEST: SYMFONY14</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          EL OBJETO REQUEST
        </summary>
        <div class="collapse-content">
            <ul>
                <li>Los objetos Request los tomaremos en nuestros métodos del controlador haciendo uso de la inyección de dependencias:</li>
                <li>VARIABLES SUPERGLOBALES DE PHP: <code class="code">$request = Request::createFromGlobals();</code></li>
                <li>Propiedades del objeto Request: <code class="code">request, query, cookies, attributes, files, server, headers</code></li>
                <li>Métodos para obtener o actualizar sus datos:
                   <code class="code">
                     all(), keys(), add(), replace(), get(), set(), has(), remove()...
                    </code>
                </li>
                <li>Forma de acceder a datos: <code class="code">$request->query->get('nombre');</code><code class="code">$request->headers->all();</code></li>
                <li>Datos enviados por formularios: <code class="code">$nombre = $request->get('actor_form')['nombre'];</code></li>
            </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">REQUEST JSON: SYMFONY14</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
          REQUEST: Recuperando JSON
        </summary>
        <div class="collapse-content">
            <ul>
                <li>Si el cuerpo de la petición es una cadena de texto JSON, podemos convertirlo a array usando el método <code class="code">toArray()</code>.</li>
                <li>Convertir JSON a Entity: <code class="code">$request = Request::createFromGlobals();</code></li>
                <li>Propiedades del objeto Request: <code class="code">request, query, cookies, attributes, files, server, headers</code></li>
                <li>Métodos para obtener o actualizar sus datos:
                   <code class="code">
                     all(), keys(), add(), replace(), get(), set(), has(), remove()...
                    </code>
                </li>
                <li>Forma de acceder a datos: <code class="code">$request->query->get('nombre');</code><code class="code">$request->headers->all();</code></li>
                <li>Datos enviados por formularios: <code class="code">$nombre = $request->get('actor_form')['nombre'];</code></li>
            </ul>
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">Extra: METODO DE BUSQUEDA EN EL REPOSITORY</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            OJO CON LA CONSTRUCCIÓN DE LA CONSULTA
        </summary>
        <div class="collapse-content">
            <ul>
            <li>
                <pre>
                    <code class="code">/**
                    * @return Movie[] Returns an array of Movie objects
                    */
                    public function findByTitle ( string $value ): Array {   
                    
                        return $this->createQueryBuilder('m')
                        ->where("m.titulo LIKE :value")
                        ->setParameter('value', "%".$value."%")
                        ->orderBy('m.id', 'ASC')
                        ->setMaxResults(10)
                        ->getQuery()
                        ->getResult()
                        ;
                    }
                    </code>
                </pre>
            </li>
        </ul>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">Extra: METODO DE BUSQUEDA EN EL CONTROLADOR</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            Para pasarle a la vista los datos obtenidos
        </summary>
        <div class="collapse-content">
            <ul>
                <li>
                    Recuperamos el value de la Request
                </li>
                <li>
                    Llamamos al método del Repositorio con una sola línea
                </li>
                <li>
                    Le pasamos a la vista el array de Movies con o sin datos
                </li>
            </ul>
            <pre>
                <code class="code">  /**
                            * @Route("/movie/search", name="movie_search")
                            */
                            public function search( Request $request ): Response {
                                
                                $valor = $request->request->get('valor');

                                $movies = $this->getDoctrine()->getRepository( Movie::class )->findByTitle( $valor );

                                return $this->render('movie/allmovies.html.twig', [
                                    'movies' => $movies,
                                ]);
                            }
                </code>
            </pre>
        </div>
      </details>
    </div>
    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">TWIG ISSUES</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            CREAR UN DATE TIME PICKER
        </summary>
        <div class="collapse-content">
            <ul>
                <li>
                    Hay que añadir esta linea en el metodo del FormBuilder
                </li>
                    <pre>
                        <code class="code">  
                        ->add('fecha_nacimiento',  DateType::class, [
                        'attr' => ['class' => 'form-control'],
                        'widget' => 'single_text',
                        ])
                        </code>
                    </pre>
                </li>
            </ul>
            
        </div>
      </details>
    </div>

    <div class="row">
      <h2 class="p-2 m-4 font-weight-bold">DB ISSUES</h2>
      <details class="collapse-panel mw-full"> 
        <summary class="collapse-header">
            config DB 
        </summary>
        <div class="collapse-content">
            <ul>
                <li>
                    Error: The metadata storage is not up to date, please run the sync-metadata-storage command to fix this issue.
                </li>config/packages/doctrine.yaml: mirar la version de la DB
                    <pre>
                        <code class="code">  
                        server_version: mariadb-10.4.13  
                        </code>
                        o mysql:
                        <code class="code">  
                        server_version: 5.7  
                        </code>
                    </pre>
                </li>
            </ul>
            
        </div>
      </details>
    </div>
    
    

</div>

{% endblock %}
